Week 1
In the tute, we formed our group, chose our project and delegated developer roles this week.
Josh and I wrote the customer user stories.
I grouped all the user stories into distinct functionalities/objectives.
We had a team meeting, where we reviewed all of the user stories, and assigned them all story points and priorities.
We decided sprint dates, and allocated user stories to each sprint.
I researched into different frameworks and libraries to use for our website backend, and also started brainstorming and
designing a database schema for key objects in our project (e.g. menu, tables, orders, etc.)

Week 2
In the tute, we checked our user stories and progress with the tutor, and made changes as suggested.
The backend team (Josh, Cyrus and I) helped each other set up set up PostgresSQL, psycopg and Flask,
and set up our backend solution, making sure it was running in preparation for Sprint 1 next week.
The backend team worked together to design a database schema, and came up with UML diagram to show how our objects would interact.
We also split up user stories for Sprint 1, where I am in charge of the backend for stories under Functionality 2 & 5.
I wrote about the problem our project tackles, and novelties it brings in the proposal.

Week 3
This week we began Sprint 1.
Josh, Cyrus and I created a script to initialise the database, and started filling it with test data.
I ran into issues with the database, so Josh helped me to troubleshoot and get it working.
I created boilerplate constructors for all of our objects.
I started working on the testing and code for user stories 5.3 & 5.4.
I wrote about each of the 5 types of users of our system, and created a diagram to demonstrate the user flows in the proposal.

Week 4
This week I completed the object-based functions and backend testing for all my assigned user stories in sprint 1,
including ability to order food and request and display the bill, and adding/deleting menu items to the menu.
I had trouble figuring out how to test database inserts/deletions, but we brainstormed the issue as a group and
decided to create multiple databases, an empty one for testing and pre-filled data for demo purposes.

Week 5
I finished my routes for my sprint 1 user stories. Unfortunately, we ran many bugs as this was the first time we
were trying to connect the front and backend, which delayed our process a bit, but we worked together as a team and
still managed to finish everything we planned before the demo. However, from this, I learnt a lot about the importance
of not only testing our backend objects, but also testing our routes using swagger inspector or similar software to
ensure that they were compatible with what front-end were expecting. 

The backend team also assigned which user stories we would be working on for Sprint 2 and 3, where I was assigned
to do remaining stories from (4) Table Services and (8) Budgeting Solutions.

Week 6
Since I knew my next few weeks would be busy, I completed majority of my Sprint 2 user stories this week. Luckily I 
learnt a lot from the issues  I faced in Sprint 1, so I was able to resolve these bugs my myself. Since some of the routes
for this sprint had not been planned yet, I also created and documented these routes and communicated with the frontend
team to ensure they were happy with them too.

Week 7
I discussed with Jannet and Josh some of the routes details that needed to change, such as adding a route to get the
current assistance boolean, and changing some fields from name references to ids. I made these changes, and then tidied
some of my code for Sprint 2 to improve software quality.

Week 8
I added extra data into our demo sql database, to help better showcase some of the new functions we had implemented.
I also planned the structure for our second demo. Additionally, I completed my remaining user stories for milestone 3,
including splitting the bill by dish and allowing an optional budget on their table which would prevent them from
ordering above the limit. The backend team also discussed overall improvements to code quality that needed to be made,
which I plan to work on next week.

Week 9
This week I helped to improve backend code quality by adding input parameter and return type checking, and removing
unneeded or repeated code. I also created a database service class, and refactored our code so that all direct database
queries are done in this file - this helped to better separate some of the backend logic.

I then tried to do some edge case functional testing on the frontend interface, to find potential bugs or cases we did not
previously consider, so our team can implement them before our final demo.